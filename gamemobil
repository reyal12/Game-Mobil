#include <iostream>
#include <ncurses/curses.h>
#include <cstdlib>
#include <ctime>
#include <unistd.h>  


const int SCREEN_WIDTH = 90;
const int SCREEN_HEIGHT = 26;
const int WIN_WIDTH = 70;

using namespace std;

int enemyY[3];
int enemyX[3];
int enemyFlag[3];
char car[4][4] = {
    {' ', '+', '+', ' '},
    {'+', '+', '+', '+'},
    {' ', '+', '+', ' '},
    {'+', '+', '+', '+'}
};

int carPos = WIN_WIDTH / 2;
int score = 0;

void drawBorder() {
    for (int i = 0; i < SCREEN_HEIGHT; i++) {
        for (int j = 0; j < 17; j++) {
            mvprintw(i, j, "+");
            mvprintw(i, WIN_WIDTH - j, "+");
        }
    }
    for (int i = 0; i < SCREEN_HEIGHT; i++) {
        mvprintw(i, SCREEN_WIDTH, "+");
    }
}

void genEnemy(int ind) {
    enemyX[ind] = 17 + rand() % 33;
}

void drawEnemy(int ind) {
    if (enemyFlag[ind]) {
        mvprintw(enemyY[ind], enemyX[ind], "****");
        mvprintw(enemyY[ind] + 1, enemyX[ind], " ** ");
        mvprintw(enemyY[ind] + 2, enemyX[ind], "****");
        mvprintw(enemyY[ind] + 3, enemyX[ind], " ** ");
    }
}

void eraseEnemy(int ind) {
    if (enemyFlag[ind]) {
        mvprintw(enemyY[ind], enemyX[ind], "    ");
        mvprintw(enemyY[ind] + 1, enemyX[ind], "    ");
        mvprintw(enemyY[ind] + 2, enemyX[ind], "    ");
        mvprintw(enemyY[ind] + 3, enemyX[ind], "    ");
    }
}

void resetEnemy(int ind) {
    eraseEnemy(ind);
    enemyY[ind] = 1;
    genEnemy(ind);
}

void drawCar() {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            mvprintw(i + 22, j + carPos, "%c", car[i][j]);
        }
    }
}

void eraseCar() {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            mvprintw(i + 22, j + carPos, " ");
        }
    }
}

int collision() {
    if (enemyY[0] + 4 >= 23) {
        if (enemyX[0] + 4 - carPos >= 0 && enemyX[0] + 4 - carPos < 9) {
            return 1;
        }
    }
    return 0;
}

void gameover() {
    clear();
    mvprintw(10, 30, "--------------------------");
    mvprintw(11, 30, "-------- Game Over -------");
    mvprintw(12, 30, "--------------------------");
    mvprintw(14, 30, "Press any key to go back to menu.");
    refresh();
    getch();
}

void updateScore() {
    mvprintw(5, WIN_WIDTH + 7, "Score: %d", score);
}

void instructions() {
    clear();
    mvprintw(5, 10, "Instructions");
    mvprintw(6, 10, "----------------");
    mvprintw(7, 10, "Avoid Cars by moving left or right.");
    mvprintw(9, 10, "Press 'a' to move left");
    mvprintw(10, 10, "Press 'd' to move right");
    mvprintw(12, 10, "Press 'escape' to exit");
    mvprintw(14, 10, "Press any key to go back to menu");
    refresh();
    getch();
}

void play() {
    carPos = WIN_WIDTH / 2;
    score = 0;
    enemyFlag[0] = 1;
    enemyFlag[1] = 0;
    enemyY[0] = enemyY[1] = 1;

    clear();
    drawBorder();
    updateScore();
    genEnemy(0);
    genEnemy(1);

    mvprintw(2, WIN_WIDTH + 7, "Car Game");
    mvprintw(4, WIN_WIDTH + 6, "----------");
    mvprintw(6, WIN_WIDTH + 6, "----------");
    mvprintw(12, WIN_WIDTH + 7, "Control ");
    mvprintw(13, WIN_WIDTH + 7, "-------- ");
    mvprintw(14, WIN_WIDTH + 2, " A Key - Left");
    mvprintw(15, WIN_WIDTH + 2, " D Key - Right");

    mvprintw(5, 18, "Press any key to start");
    refresh();
    getch();
    mvprintw(5, 18, "                      ");

while (1) {
        char ch = getch(); 
        
        
        if (ch == 'a' || ch == 'A') {
            if (carPos > 18)
                carPos -= 4;
        }
        if (ch == 'd' || ch == 'D') {
            if (carPos < WIN_WIDTH - 4)
                carPos += 4;
        }
        if (ch == 27) { 
            break;
        }

        drawCar();
        drawEnemy(0);
        drawEnemy(1);
        if (collision() == 1) {
            gameover();
            return;
        }
        refresh();
        eraseCar();
        eraseEnemy(0);
        eraseEnemy(1);

        if (enemyY[0] == 10)
            if (enemyFlag[1] == 0)
                enemyFlag[1] = 1;

        if (enemyFlag[0] == 1)
            enemyY[0] += 1;

        if (enemyFlag[1] == 1)
            enemyY[1] += 1;

        if (enemyY[0] > SCREEN_HEIGHT - 4) {
            resetEnemy(0);
            score++;
            updateScore();
        }
        if (enemyY[1] > SCREEN_HEIGHT - 4) {
            resetEnemy(1);
            score++;
            updateScore();
        }

        usleep(50000); 
    }
}

int main() {
    srand((unsigned)time(NULL));
    initscr();          
    raw();              
    keypad(stdscr, TRUE);  
    noecho();           

    do {
        clear();
        mvprintw(5, 45, " -------------------------- ");
        mvprintw(6, 45, " |        Car Game        | ");
        mvprintw(7, 45, " --------------------------");
        mvprintw(9, 45, "1. Start Game");
        mvprintw(10, 45, "2. Instructions");
        mvprintw(11, 45, "3. Quit");
        mvprintw(13, 45, "Select option: ");
        refresh();

        char op = getch();

        if (op == '1')
            play();
        else if (op == '2')
            instructions();
        else if (op == '3')
            break;

    } while (1);

    endwin(); 
    return 0;
}
